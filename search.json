[{"title":"使用 maven-semantic-release 实现自动化发版","url":"/2021/10/16/maven-semantic-release/","content":"\n[\"如何发布 Java 包到 Maven 中央仓库\"](https://seriouszyx.com/archives/36/) 讲解了本地将 Java 包发布到 Maven 中央库的全过程。但在开源项目中，一般通过 GitHub 进行代码托管，并在 GitHub 的 Release 中进行发版并写明更新日志，还可能在 README 中添加 Maven 中央库的徽章。这一过程固定又繁琐，本文通过 maven-semantic-release 和 GitHub Actions 进行自动化操作，完成上述的整套流程。\n\n演示仓库位于 [https://github.com/seriouszyx/maven-release-example](https://github.com/seriouszyx/maven-release-example)。\n\n<!--more-->\n\n## GitHub Actions\n\nGitHub 提供了一个 Maven 工作流的[模板](https://github.com/actions/starter-workflows/blob/main/ci/maven.yml)，在项目根目录创建 `.github/workflows/maven-ci.yml` 文件，添加工作流的配置文件。\n\n```yml\nname: Java CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: Build with Maven\n        run: mvn clean test\n```\n\n工作流执行了下面几步。\n\n* `checkout` 将存储库的副本下载到运行的服务器上\n* `setup-java` 配置了 JDK11\n* `Build with Maven` 进行构建和测试\n\n为 `maven-gpg-plugin` 添加 configuration，用于 GPG 非交互式密码输入。\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-gpg-plugin</artifactId>\n    <version>1.5</version>\n    <executions>\n        <execution>\n            <id>sign-artifacts</id>\n            <phase>verify</phase>\n            <goals>\n                <goal>sign</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <!-- Prevent gpg from using pinentry programs -->\n        <gpgArguments>\n            <arg>--pinentry-mode</arg>\n            <arg>loopback</arg>\n        </gpgArguments>\n    </configuration>\n</plugin>\n```\n\n## maven-semantic-release\n\n[semantic-release](https://semantic-release.gitbook.io/semantic-release/) 会根据规范化的 commit 信息生成发布日志，默认使用 angular 规则，其他规则可以配置插件完成。\n\nsemantic-release 大致的工作流如下:\n\n* 提交到特定的分支触发 release 流程\n* 验证 commit 信息，生成 release note，打 git tag\n* 其他后续流程，如生成 `CHANGELOG.md`，`npm publish` 等等（通过插件完成）\n\n[maven-semantic-release](https://github.com/conveyal/maven-semantic-release) 是官方文档列出的针对 Maven 的第三方工具，它将部署一个 Maven 项目到 Maven 中央库，而 semantic-release 则是部署一个 node.js 项目到 npm。\n\n前文中 JIRA 和 GPG 的配置信息全都存放在本地，可以将其配置在 GitHub Secrets 中，以供 GitHub Actions 自动构建过程中使用。\n\n需要提前准备好的是 JIRA 的用户名（OSSRH_JIRA_USERNAME）和密码（OSSRH_JIRA_PASSWORD），GPG 的 key 名（GPG_KEY_NAME）、私钥（GPG_PRIVATE_KEY）和生成键值对时输入的密码（GPG_PASSPHRASE）。\n\n其中，GPG 的 key 名可以通过以下命令获得，我的是 `89985FBD3651A87B` 。\n\n```shell\nC:\\Users\\Yixiang Zhao>gpg --list-secret-keys --keyid-format LONG\nC:/Users/Yixiang Zhao/AppData/Roaming/gnupg/pubring.kbx\n-------------------------------------------------------\nsec   rsa3072/89985FBD3651A87B 2021-10-14 [SC] [expires: 2023-10-14]\n      444D548E4E29746B4E2C89FC89985FBD3651A87B\nuid                 [ultimate] Yixiang Zhao <seriouszyx@gmail.com>\nssb   rsa3072/1613CEA56E822D62 2021-10-14 [E] [expires: 2023-10-14]\n```\n\nGPG 的私钥可以通过 `gpg --armo --export-secret-keys 89985FBD3651A87B` 命令获得，最后的参数是 key 名。注意私钥是从 `-----BEGIN PGP PRIVATE KEY BLOCK-----` 一直到 `-----END PGP PRIVATE KEY BLOCK-----`，而不是仅仅是中间这一段文本。\n\n将这些配置信息添加到 Settings->Secrets->Repository secrets 中。\n\n![](https://img.seriouszyx.com/202110161622009.png#vwid=2560&vhei=1378)\n\n补充 `maven-ci.yml` 文件，添加 maven-semantic-release 配置。\n\n```yml\nname: Java CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n          server-username: OSSRH_JIRA_USERNAME\n          server-password: OSSRH_JIRA_PASSWORD\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n\n      - name: Build with Maven\n        run: mvn clean test\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16\n\n      - name: Sematic Release\n        run: |\n          npm install -g @conveyal/maven-semantic-release semantic-release\n          semantic-release --prepare @conveyal/maven-semantic-release --publish @semantic-release/github,@conveyal/maven-semantic-release --verify-conditions @semantic-release/github,@conveyal/maven-semantic-release --verify-release @conveyal/maven-semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n          OSSRH_JIRA_USERNAME: ${{ secrets.OSSRH_JIRA_USERNAME }}\n          OSSRH_JIRA_PASSWORD: ${{ secrets.OSSRH_JIRA_PASSWORD }}\n\n```\n\n前文在本地 maven 的 `settings.xml` 文件中配置的信息，转移到项目根目录下的 `maven-settings.xml` 中。\n\n```xml\n<settings>\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>${OSSRH_JIRA_USERNAME}</username>\n            <password>${OSSRH_JIRA_PASSWORD}</password>\n        </server>\n    </servers>\n    <profiles>\n        <profile>\n            <id>ossrh</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <properties>\n                <gpg.executable>gpg</gpg.executable>\n                <gpg.keyname>${GPG_KEY_NAME}</gpg.keyname>\n                <gpg.passphrase>${GPG_PASSPHRASE}</gpg.passphrase>\n            </properties>\n        </profile>\n    </profiles>\n</settings>\n```\n\n配置好后，每次 push 或 pull request 到 master 分支时，都会出发 GitHub Actions 自动化构建、测试，并通过 maven-semantic-release 将 jar 上传到 Maven 中央库，并在项目的 GitHub Release 中自动生成更新日志。\n\n![](https://img.seriouszyx.com/202110161622266.png#vwid=1960&vhei=1261)\n\n---\n\n1. [semantic-release](https://semantic-release.gitbook.io/semantic-release/)\n2. [通过 GitHub Action 自动部署 Maven 项目](https://juejin.cn/post/6892965219791093773)\n3. [团队敏捷实践 —— 使用 semantic-release 自动管理发布版本](https://blog.dteam.top/posts/2020-05/semantic-release.html)"},{"title":"如何发布 Java 包到 Maven 中央仓库","url":"/2021/10/16/publish-to-maven/","content":"\n最近参与一些开源项目，涉及到发版相关的问题，没有看到详细又不过时的教程，于是自己调研摸索，总结出了这篇文章。\n\n<!--more-->\n\n本文主要参考[官方文档](https://central.sonatype.org/publish/)进行编写，演示仓库位于 [https://github.com/seriouszyx/maven-release-example](https://github.com/seriouszyx/maven-release-example)。\n\n## 准备工作\n\n### Coordinates\n\nMaven 用 **groupid** 来标识项目空间，用域名逆序的方式命名。下面是两种命名的例子，如果有自己的域名，直接使用就可以；如果没有，可以使用 github 等代码托管服务的域名。\n\n* www.seriouszyx.com -> com.seriouszyx\n* github.com/seriouszyx -> io.github.seriouszyx\n\n下面是支持个人 groupid 的代码托管服务，假设使用 `io.github.myusername` ，需要创建一个名为 **OSSRH-TICKETNUMBER** 的公开仓库进行验证（验证成功后可删除）。如果使用自己的域名，也需要添加 TXT 解析，稍后会提到。\n\n| 服务        | groupid                   | 相关文档                                                                                                                                                                                   |\n| ----------- | ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| GitHub      | io.github.myusername      | [https://pages.github.com/](https://pages.github.com/)<br />                                                                                                                                     |\n| GitLab      | io.gitlab.myusername      | [https://about.gitlab.com/stages-devops-lifecycle/pages/](https://about.gitlab.com/stages-devops-lifecycle/pages/)                                                                         |\n| Gitee       | io.gitee.myusername       | [https://gitee.com/help/articles/4136](https://gitee.com/help/articles/4136)                                                                                                               |\n| Bitbucket   | io.bitbucket.myusername   | [https://support.atlassian.com/bitbucket-cloud/docs/publishing-a-website-on-bitbucket-cloud/](https://support.atlassian.com/bitbucket-cloud/docs/publishing-a-website-on-bitbucket-cloud/) |\n| SourceForge | io.sourceforge.myusername | [https://sourceforge.net/p/forge/documentation/Project%20Web%20Services/](https://sourceforge.net/p/forge/documentation/Project%20Web%20Services/)                                         |\n\n**artifactId** 用来标识项目本身，如果项目命名很长，可以使用“-”来进行分隔。\n\n### GPG\n\n将组件发布到 Maven 中央仓库需要使用 **PGP** 进行签名，GnuPG （又称 GPG） 都是 OpenPGP 的实现，需要先创建你自己的键值对，再上传到服务器以供验证。\n\n从 [https//www.gnupg.org/download/](https://gnupg.org/download/index.html#sec-1-2) 下载安装，使用 `--version` 标志检查。\n\n```shell\n$ gpg --version\ngpg (GnuPG) 2.2.28\nlibgcrypt 1.8.8\nCopyright (C) 2021 g10 Code GmbH\nLicense GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: C:/Users/Yixiang Zhao/AppData/Roaming/gnupg\nSupported algorithms:\nPubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA\nCipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n        CAMELLIA128, CAMELLIA192, CAMELLIA256\nHash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\nCompression: Uncompressed, ZIP, ZLIB, BZIP2\n```\n\n安装成功后产生键值对，过程中需要填写姓名、邮箱和密码，密钥有效期为 2 年，到时候需要使用密码延长有效期，可以看到我的公钥 id 是 `444D548E4E29746B4E2C89FC89985FBD3651A87B` 。\n\n```shell\n$ gpg --gen-key\ngpg (GnuPG) 2.2.28; Copyright (C) 2021 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nNote: Use \"gpg --full-generate-key\" for a full featured key generation dialog.\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Yixiang Zhao\nEmail address: seriouszyx@gmail.com\nYou selected this USER-ID:\n    \"Yixiang Zhao <seriouszyx@gmail.com>\"\n\nChange (N)ame, (E)mail, or (O)kay/(Q)uit? O\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: key 89985FBD3651A87B marked as ultimately trusted\ngpg: directory 'C:/Users/Yixiang Zhao/AppData/Roaming/gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as 'C:/Users/Yixiang Zhao/AppData/Roaming/gnupg/openpgp-revocs.d\\444D548E4E29746B4E2C89FC89985FBD3651A87B.rev'\npublic and secret key created and signed.\n\npub   rsa3072 2021-10-14 [SC] [expires: 2023-10-14]\n      444D548E4E29746B4E2C89FC89985FBD3651A87B\nuid                      Yixiang Zhao <seriouszyx@gmail.com>\nsub   rsa3072 2021-10-14 [E] [expires: 2023-10-14]\n```\n\n后续步骤需要通过你的公钥来进行验证，所以把它上传到服务器中，注意 `--send-keys` 后面是你自己的公钥。\n\n```shell\n$ gpg --keyserver keyserver.ubuntu.com --send-keys 444D548E4E29746B4E2C89FC89985FBD3651A87B\ngpg: sending key 89985FBD3651A87B to hkp://keyserver.ubuntu.com\n```\n\n等大概十几分钟，验证公钥是否发布成功。\n\n```shell\n$ gpg --keyserver keyserver.ubuntu.com --recv-keys 444D548E4E29746B4E2C89FC89985FBD3651A87B\ngpg: key 89985FBD3651A87B: \"Yixiang Zhao <seriouszyx@gmail.com>\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n```\n\n## 在 Sonatype 创建 Issue\n\n开发者要想将组件发布至 Maven 中央仓库，需要借助于 Sonatype 的开源软件存储库托管（Open Source Software Repository Hosting, OSSRH）服务。Sonatype 使用 JIRA 来管理请求，所以需要先[注册账号](https://issues.sonatype.org/secure/Signup!default.jspa)。\n\n注册好之后，就可以[创建一个新的 Issue](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)（文档中又称 Project ticket），可以参考我创建的测试 Issue [OSSRH-74121](https://issues.sonatype.org/browse/OSSRH-74121)。\n\n![](https://img.seriouszyx.com/202110161035158.png#vwid=1949&vhei=895)\n\n这时需要进行人工审核，将分配的编号 `OSSRH-74121` 添加到域名的 TXT 解析，或者在 GitHub 等托管服务中创建一个名为 `OSSRH-74121` 的公开库。我等了大概一两个小时，就通过了审核，Status 变成了 `RESOLVED` 。\n\n## 配置发布信息\n\n本文使用 Maven 为例发布自己的 Java 包，如果使用 Gradle、Ant 等工具，可以参照官方文档。\n\n### 分发管理和认证\n\n在 `pom.xml` 中添加以下配置，使得可以使用 Nexus Staging Maven plugin 插件向 OSSRH Nexus Repository Manager 发布。\n\n```xml\n<distributionManagement>\n  <snapshotRepository>\n    <id>ossrh</id>\n    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>\n  </snapshotRepository>\n  <repository>\n    <id>ossrh</id>\n    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n  </repository>\n</distributionManagement>\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.sonatype.plugins</groupId>\n      <artifactId>nexus-staging-maven-plugin</artifactId>\n      <version>1.6.8</version>\n      <extensions>true</extensions>\n      <configuration>\n        <serverId>ossrh</serverId>\n        <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>\n        <autoReleaseAfterClose>true</autoReleaseAfterClose>\n      </configuration>\n    </plugin>\n    ...\n  </plugins>\n</build>\n```\n\n下面是发布所需的 JIRA 账户信息，写入到 Maven 的 `setting.xml` 文件中（通常位于 `~/.m2`）。\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>ossrh</id>\n      <username>your-jira-id</username>\n      <password>your-jira-pwd</password>\n    </server>\n  </servers>\n</settings>\n```\n\n注意这里的 id 和 `snapshotRepository` /`repository` 中的 id，以及 `plugin` 中的 id 都是相同的，都为 **ossrh**。\n\n### Javadoc 和源代码\n\n为了生成 Javadoc 和源 jar 文件，需要在 `pom.xml` 中添加以下配置。\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-source-plugin</artifactId>\n      <version>2.2.1</version>\n      <executions>\n        <execution>\n          <id>attach-sources</id>\n          <goals>\n            <goal>jar-no-fork</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-javadoc-plugin</artifactId>\n      <version>2.9.1</version>\n      <executions>\n        <execution>\n          <id>attach-javadocs</id>\n          <goals>\n            <goal>jar</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n### GPG 签名组件\n\nMaven GPG 插件使用以下配置为组件进行签名。\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-gpg-plugin</artifactId>\n      <version>1.5</version>\n      <executions>\n        <execution>\n          <id>sign-artifacts</id>\n          <phase>verify</phase>\n          <goals>\n            <goal>sign</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n并在 `setting.xml` 中配置 gpg 的运行文件和密码。\n\n```xml\n<settings>\n  <profiles>\n    <profile>\n      <id>ossrh</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <gpg.executable>D:/Work/GnuPG/bin/gpg.exe</gpg.executable>\n        <gpg.passphrase>the_pass_phrase</gpg.passphrase>\n      </properties>\n    </profile>\n  </profiles>\n</settings>\n```\n\n如果想要发布正式版本，还需要在 `pom.xml` 中配置项目名、描述、开发者等信息。\n\n```xml\n<name>maven-release-example</name>\n<description>Example project to deploy maven projects.</description>\n<url>https://github.com/seriouszyx/maven-release-example</url>\n<licenses>\n    <license>\n        <name>MIT</name>\n        <url>https://opensource.org/licenses/MIT</url>\n    </license>\n</licenses>\n<developers>\n    <developer>\n        <name>Yixiang Zhao</name>\n        <email>seriouszyx@gmail.com</email>\n        <organization>seriouszyx</organization>\n        <organizationUrl>https://seriouszyx.com/</organizationUrl>\n    </developer>\n</developers>\n<scm>\n    <connection>scm:git:https://github.com/seriouszyx/maven-release-example.git</connection>\n    <developerConnection>scm:git:https://github.com/seriouszyx/maven-release-example.git</developerConnection>\n    <url>https://github.com/seriouszyx/maven-release-example</url>\n</scm>\n```\n\n## 发布\n\n更改 `pom.xml` 中的版本号为 `1.0.0` ， 在项目根目录运行 `mvn clean deploy` 即可发布，发布成功后组件会存储到一个临时存储库中，只对团队成员开放，可以在 [https://s01.oss.sonatype.org/](https://s01.oss.sonatype.org/) 访问，点击右上角登录 JIRA 的账号，搜索刚发布的组件，即可查询到相关信息。\n\n![](https://img.seriouszyx.com/202110161035870.png#vwid=2560&vhei=1381)\n\n因为之前在 maven 插件 nexus-staging-maven-plugin 中的 `autoReleaseAfterClose` 属性设置为 true 了，所以自动上传到 staging repository ，并且自动执行了 close->release->drop 三步曲，等待两小时后就可以在 [https://search.maven.org](https://search.maven.org/) 查到了。\n\n![](https://img.seriouszyx.com/202110161035404.png#vwid=2069&vhei=393)\n\n在新建工程的 `pom.xml` 种添加依赖，即可使用 jar 包中的方法。\n\n```xml\n<dependency>\n    <groupId>com.seriouszyx</groupId>\n    <artifactId>maven-release-example</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n\n---\n\n1. [The Central Repository Documentation](https://central.sonatype.org/publish/)\n2. [发布项目到中央库的一些常见问题](https://blog.csdn.net/qiaojialin/article/details/77659200)"},{"title":"网络扫描探测工具的分析与识别","url":"/2021/09/01/scanner-analysis-and-detect/","content":"\n## 扫描探测工具识别\n\n网络扫描探测通常是发起网络入侵的第一步，攻击者可以利用扫描探测工具获取网络中的主机系统、TCP/UDP 端口的开放情况、子域名、网站指纹、WAF、CDN、中间件类别等重要信息，识别出存在安全漏洞的主机或系统，从而发起有针对性的网络入侵行为。此外，一些扫描工具同时具备漏洞利用的能力。因此，对网络扫描探测行为进行识别和研究，有利于及时发现网络攻击的前兆，发现网络攻击行为，快速定位网络服务中存在的漏洞，对网络安全防护工作十分有意义。\n\n本文以下列三个常见扫描器为代表，探究扫描器的特有指纹信息，编写 Demo 进行扫描器的识别。\n\n![](https://img.seriouszyx.com/202109011044955.png#vwid=1999&vhei=694)\n\n## Zmap\n\n### 抓包分析\n\nZMap 被设计用来针对整个 IPv4 地址空间或其中的大部分实施综合扫描的工具。\n\n默认情况下，ZMap 会对于指定端口实施尽可能大速率的 TCP SYN 扫描。如下图所示，客户端在发送一个 SYN 包的时候，如果对方端口开放，就会发送一个 SYN-ACK，那么就表明这个端口开放，这时候我们发送 RST 包，防止占用对方资源；如果对方端口不开放，那么我们就会收到对方主机的 RST 包。\n\n![](https://img.seriouszyx.com/202109011044047.png#vwid=2652&vhei=1128)\n\n较为保守的情况下，对 10,000 个随机的地址的 80 端口以 10Mbps 的速度扫描，如下所示：\n\n![](https://img.seriouszyx.com/202109011044067.png#vwid=2225&vhei=653)\n\n在生成的 csv 结果文件中，以下 IP 地址的 80 端口开放：\n\n```bash\n47.243.139.246\n20.205.204.152\n121.36.193.65\n156.245.39.71\n13.238.233.150\n142.234.31.240\n68.183.75.244\n185.48.122.237\n52.25.116.123\n104.127.1.181\n185.248.102.245\n95.217.201.8\n3.125.24.134\n23.15.117.202\n```\n\n抓包结果如下所示，Zmap 向随机的 10,000 个 IP 的 80 端口发送 SYN 数据包。\n\n![](https://img.seriouszyx.com/202109011044558.png#vwid=2560&vhei=908)\n\n如果 IP 的 80 端口开放，以 47.243.139.246 为例，筛选出的数据包如下图所示，具体解释为：\n\n1. 向 47.243.139.246 的 80 端口发送 SYN 数据包\n2. 接收到 47.243.139.246 的 80 端口的 SYN/ACK 包，证明该 IP 的 80 端口可用\n3. 向 47.243.139.246 的 80 端口发送 RST 数据包，防止占用对方资源\n\n![](https://img.seriouszyx.com/202109011044591.png#vwid=2560&vhei=371)\n\n如果 IP 的 80 端口不开放，以 44.102.170.124 为例，筛选出的数据包如下图所示。Zmap 向其发送 SYN 请求后没有得到应答，故判断该 IP 的 80 端口不可用。\n\n![](https://img.seriouszyx.com/202109011044623.png#vwid=2560&vhei=235)\n\n查看 Zmap 向哪些 IP 发送了 RST 数据包，则证明这些 IP 的 80 端口可用。筛选结果如下图所示，目的地址与上述的 csv 结果文件一致。\n\n![](https://img.seriouszyx.com/202109011044663.png#vwid=2560&vhei=798)\n\n### 源码分析\n\nZmap 整体函数调用图如下所示。\n\n![](https://img.seriouszyx.com/202109011044692.png#vwid=942&vhei=522)\n\n通过图我们可以直观的看到整个程序调用的过程。Zmap 在启动时候，先获取环境信息，如 IP、网关等。然后读取配置文件选择使用哪种扫描方式，然后在 Probe_modules 切换到对应的模块，然后启动。\n\n下面侧重分析 SYN 扫描这个模块，整个执行的过程中，会有一个线程专门负责发送，另外有一个使用 libpcap 组件抓包，发送和接收就独立开来。\n\n[zmap/src/probe_modules/module_tcp_synscan.c](https://github.com/zmap/zmap/blob/main/src/probe_modules/module_tcp_synscan.c) 是用于执行 TCP SYN 扫描的探测模块，在初始化阶段的 synscan_init_perthread 函数中，依次调用 make_ip_header 函数和 make_tcp_header 函数进行数据包 header 的封装。\n\n```c\nstatic int synscan_init_perthread(\n    void *buf, macaddr_t *src, macaddr_t *gw,\n    port_h_t dst_port,\n    UNUSED void **arg_ptr)\n{\n    struct ether_header *eth_header = (struct ether_header *)buf;\n    make_eth_header(eth_header, src, gw);\n    struct ip *ip_header = (struct ip *)(&eth_header[1]);\n    uint16_t len = htons(sizeof(struct ip) + ZMAP_TCP_SYNSCAN_TCP_HEADER_LEN);\n    make_ip_header(ip_header, IPPROTO_TCP, len);\n    struct tcphdr *tcp_header = (struct tcphdr *)(&ip_header[1]);\n    make_tcp_header(tcp_header, dst_port, TH_SYN);\n    set_mss_option(tcp_header);\n    return EXIT_SUCCESS;\n}\n```\n\n这两个函数编写于 [zmap/src/probe_modules/packet.c](https://github.com/zmap/zmap/blob/main/src/probe_modules/packet.c) 中。分析 make_ip_header 函数可知，在下示第 7 行，IP 的 identification number 被设置为固定的 54321。\n\n```c\nvoid make_ip_header(struct ip *iph, uint8_t protocol, uint16_t len)\n{\n    iph->ip_hl = 5;  // Internet Header Length\n    iph->ip_v = 4;   // IPv4\n    iph->ip_tos = 0; // Type of Service\n    iph->ip_len = len;\n    iph->ip_id = htons(54321); // identification number\n    iph->ip_off = 0;\t   // fragmentation flag\n    iph->ip_ttl = MAXTTL;      // time to live (TTL)\n    iph->ip_p = protocol;      // upper layer protocol => TCP\n    // we set the checksum = 0 for now because that's\n    // what it needs to be when we run the IP checksum\n    iph->ip_sum = 0;\n}\n```\n\n分析 make_tcp_header 函数可知，在下示第 10 行，TCP 的 window 被设置为固定的 65535。\n\n```c\nvoid make_tcp_header(struct tcphdr *tcp_header, port_h_t dest_port,\n\t\t     uint16_t th_flags)\n{\n    tcp_header->th_seq = random();\n    tcp_header->th_ack = 0;\n    tcp_header->th_x2 = 0;\n    tcp_header->th_off = 5; // data offset\n    tcp_header->th_flags = 0;\n    tcp_header->th_flags |= th_flags;\n    tcp_header->th_win = htons(65535); // largest possible window\n    tcp_header->th_sum = 0;\n    tcp_header->th_urp = 0;\n    tcp_header->th_dport = htons(dest_port);\n}\n```\n\n查看抓取的 SYN 数据包，如下图所示，IP 的 ID 和 TCP 的 window 确实为 54321 和 65535，所以这两个固定值可作为扫描器特征。\n\n![](https://img.seriouszyx.com/202109011044714.png#vwid=2560&vhei=1275)\n\n## Angry IP Scanner\n\n### 抓包分析\n\nAngry IP Scanner（简称 angryip） 是一款开源跨平台的网络扫描器，主要用于扫描 IP 地址和端口。\n\nangryip 默认使用 Windows ICMP 方法扫描各个 ip 地址，扫描每个 IP 的 80、443 和 8080 端口。以 IP 范围 123.56.104.200~123.56.104.250 为例，扫描结果如下图所示，红色代表 IP 不可用，蓝色代表 IP 可用端口不可用，绿色代表 IP 和端口均可用。\n\n![](https://img.seriouszyx.com/202109011044740.png#vwid=2558&vhei=1534)\n\n在捕获的数据包中，以 123.56.104.218 为例，该 IP 被标记为绿色，下面是与它有关的数据包抓取结果。\n\n图中第一个红框处 angryip 与 123.56.104.218 进行了 3 次 ping，且都予以回复，说明该 IP 可用。第二个红框处 angryip 分别测试 123.56.104.218 的 80、443 和 8080 端口，其中 80 和 443 端口予以回复，说明这两个端口可用。\n\n![](https://img.seriouszyx.com/202109011044760.png#vwid=2560&vhei=930)\n\n在不可用的 IP 中，以 123.56.104.204 为例，与它相关的数据包抓取结果如下。angryip 向其发送 3 次 ping 请求，都没有得到回复，则判断其 IP 不可用，也没有向其端口发送数据包。\n\n![](https://img.seriouszyx.com/202109011044783.png#vwid=2560&vhei=325)\n\n### 源码分析\n\n因为无论 IP 和端口是否可用，angryip 都会先发送 ping 数据包，所以通过 ping 阶段的源码分析其工具的特征。\n\n分析 [ipscan/test/net/azib/ipscan/core/net/ICMPSharedPingerTest.java](https://github.com/angryip/ipscan/blob/64ec7090acdba380a62d5d2e1a6c630cc5302197/test/net/azib/ipscan/core/net/ICMPSharedPingerTest.java) 源码，该测试类调用 pinger.ping()方法 3 次，并计算平均时长。\n\n```java\npublic class ICMPSharedPingerTest {\n    @Test @Ignore(\"this test works only under root\")\n    public void testPing() throws Exception {\n\tPinger pinger = new ICMPSharedPinger(1000);\n\tPingResult result = pinger.ping(new ScanningSubject(InetAddress.getLocalHost()), 3);\n\tassertTrue(result.getAverageTime() >= 0);\n\tassertTrue(result.getAverageTime() < 50);\n\tassertTrue(result.getTTL() >= 0);\n    }\n}\n```\n\n该方法在 [ipscan/test/net/azib/ipscan/core/net/WindowsPinger.java](https://github.com/angryip/ipscan/blob/master/src/net/azib/ipscan/core/net/WindowsPinger.java) 中，源码如下所示，判断 IP 类型，并调用 IPv6 和 IPv4 对应的方法。\n\n```java\npublic PingResult ping(ScanningSubject subject, int count) throws IOException {\n    if (subject.isIPv6())\n\treturn ping6(subject, count);\n    else\n\treturn ping4(subject, count);\n}\n```\n\n以 IPv4 为例，方法中定义了数据包的数据大小为 32，即 sendDataSize = 32。后续使用 Memory()方法创建 SendData 对象，并未对其进行赋值，故默认值应全为 0。\n\n```java\nprivate PingResult ping4(ScanningSubject subject, int count) throws IOException {\n    Pointer handle = dll.IcmpCreateFile();\n    if (handle == null) throw new IOException(\"Unable to create Windows native ICMP handle\");\n\n    int sendDataSize = 32;\n    int replyDataSize = sendDataSize + (new IcmpEchoReply().size()) + 10;\n    Pointer sendData = new Memory(sendDataSize);\n    sendData.clear(sendDataSize);\n    Pointer replyData = new Memory(replyDataSize);\n\n    PingResult result = new PingResult(subject.getAddress(), count);\n    try {\n\tIpAddrByVal ipaddr = toIpAddr(subject.getAddress());\n\tfor (int i = 1; i <= count && !currentThread().isInterrupted(); i++) {\n            int numReplies = dll.IcmpSendEcho(handle, ipaddr, sendData, (short) sendDataSize, null, replyData, replyDataSize, timeout);\n\t    IcmpEchoReply echoReply = new IcmpEchoReply(replyData);\n\t    if (numReplies > 0 && echoReply.status == 0 && Arrays.equals(echoReply.address.bytes, ipaddr.bytes)) {\n\t\tresult.addReply(echoReply.roundTripTime);\n\t\tresult.setTTL(echoReply.options.ttl & 0xFF);\n\t    }\n\t}\n    }\n    finally {\n\tdll.IcmpCloseHandle(handle);\n    }\n    return result;\n}\n```\n\n在实际抓包中，每个发出的 ICMP 请求中，Data 的大小均为 32 字节，且全为 0，所以可将它作为 angryip 的特征。\n\n![](https://img.seriouszyx.com/202109011044806.png#vwid=2560&vhei=1068)\n\n## Masscan\n\n### 抓包分析\n\nMasscan 默认使用 SYN 扫描，以 IP 123.56.104.218 为例，扫描其 1~600 端口，结果如下所示。\n\n![](https://img.seriouszyx.com/202109011044826.png#vwid=1346&vhei=278)\n\n抓包结果如下所示，Masscan 向 123.56.104.218 的 1~600 端口进行随机化扫描，发出 SYN 请求。\n\n![](https://img.seriouszyx.com/202109011044847.png#vwid=2560&vhei=1250)\n\n 查看 80 端口的数据包，下图可知 80 端口向 Masscan 回复，说明该端口可用。\n\n![](https://img.seriouszyx.com/202109011044871.png#vwid=2560&vhei=277)\n\n查看 81 端口的数据包，发现并没有数据包回复，说明该端口不可用。\n\n![](https://img.seriouszyx.com/202109011044891.png#vwid=2560&vhei=162)\n\n筛选收到的 SYN/ACK 数据包，得到 22、443 和 80 端口，说明 123.56.104.218 的 1~600 中这 3 个端口可用。\n\n![](https://img.seriouszyx.com/202109011044912.png#vwid=2560&vhei=260)\n\n### 源码分析\n\n观察抓包分析中结果可以发现，所有发出的 SYN 请求中，窗口大小都是 1024。\n\n![](https://img.seriouszyx.com/202109011044935.png#vwid=2560&vhei=1250)\n\n在 Masscan 的主函数 [masscan/src/main.c](https://github.com/robertdavidgraham/masscan/blob/master/src/main.c) 文件中，默认使用以下代码初始化 TCP 数据包的模板。\n\n```c\ntemplate_packet_init(\n    parms->tmplset,\n    parms->source_mac,\n    parms->router_mac_ipv4,\n    parms->router_mac_ipv6,\n    masscan->payloads.udp,\n    masscan->payloads.oproto,\n    stack_if_datalink(masscan->nic[index].adapter),\n    masscan->seed);\n```\n\n该函数位于 [masscan/src/templ.pkt.c](https://github.com/robertdavidgraham/masscan/blob/master/src/templ-pkt.c) 中，其中对于 TCP 的初始化代码如下所示。\n\n```c\n/* [TCP] */\n_template_init(&templset->pkts[Proto_TCP],\n               source_mac, router_mac_ipv4, router_mac_ipv6,\n               default_tcp_template,\n               sizeof(default_tcp_template)-1,\n               data_link);\ntemplset->count++;\n```\n\n其中调用的 default_tcp_template 定义在该文件头部，下述 7 行指定 IP 的 length 为 40，下述 10 行指定 TLL 为 255，下述 18 行指定 ack 为 0，下述 21 行指定 window 的大小为 1024，可以将这些指标视为 Masscan 的特征。\n\n```c\nstatic unsigned char default_tcp_template[] =\n    \"\\0\\1\\2\\3\\4\\5\"  /* Ethernet: destination */\n    \"\\6\\7\\x8\\x9\\xa\\xb\"  /* Ethernet: source */\n    \"\\x08\\x00\"      /* Ethernet type: IPv4 */\n    \"\\x45\"          /* IP type */\n    \"\\x00\"\n    \"\\x00\\x28\"      /* total length = 40 bytes */\n    \"\\x00\\x00\"      /* identification */\n    \"\\x00\\x00\"      /* fragmentation flags */\n    \"\\xFF\\x06\"      /* TTL=255, proto=TCP */\n    \"\\xFF\\xFF\"      /* checksum */\n    \"\\0\\0\\0\\0\"      /* source address */\n    \"\\0\\0\\0\\0\"      /* destination address */\n\n    \"\\0\\0\"          /* source port */\n    \"\\0\\0\"          /* destination port */\n    \"\\0\\0\\0\\0\"      /* sequence number */\n    \"\\0\\0\\0\\0\"      /* ack number */\n    \"\\x50\"          /* header length */\n    \"\\x02\"          /* SYN */\n    \"\\x04\\x0\"        /* window fixed to 1024 */\n    \"\\xFF\\xFF\"      /* checksum */\n    \"\\x00\\x00\"      /* urgent pointer */\n    \"\\x02\\x04\\x05\\xb4\"  /* added options [mss 1460] */\n;\n```\n\n## Demo 设计与实现\n\n经过抓包分析和源码分析后，可以总结三个扫描器的特征如下表所示。\n\n![](https://img.seriouszyx.com/202109011044988.png#vwid=1524&vhei=877)\n\n总体来看，三个扫描器工具都是基于单包的头部信息进行识别，且经过源码确认，属于强特征。那么识别的具体设计也就很容易了，对 pcap 文件的每个数据包进行分类，判断其是否满足上述三个指纹，核心识别流程图如下图所示。\n\n![](https://img.seriouszyx.com/202109011044015.png#vwid=622&vhei=624)\n\n具体实现使用 Python 的 Scrapy 包解析 pcap，进行相关操作，代码很短，核心部分如下。\n\n```python\nfor data in packets:\n    if 'TCP' in data:\n        # 识别 Zmap\n        if (data['TCP'].window == 65535) and (data['IP'].id == 54321):\n            isZmap = True\n        # 识别 Masscan\n        if data['TCP'].window == 1024 and data['TCP'].ack == 0 \\\n                and data['IP'].ttl == 255 and data['IP'].len == 40:\n            isMasscan = True\n    # 识别 Angry IP Scanner\n    if 'ICMP' in data:\n        if 'Raw' in data:\n            items = processStr(data['Raw'].load)\n            if len(data['Raw']) == 32 and items == ANGRYIP_FLAG:\n                isAngryip = True\n```\n\n代码放置于 [GitHub](https://github.com/seriouszyx/ScannerRecognition)。\n\n---\n\n参考：\n\n[互联网扫描器 ZMap 完全手册](https://linux.cn/article-5860-1.html)\n\n[zmap 源码解读之 zmap 扫描快的原因](https://nanshihui.github.io/2017/03/29/zmap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B9%8Bzmap%E6%89%AB%E6%8F%8F%E5%BF%AB%E7%9A%84%E5%8E%9F%E5%9B%A0/)\n\n[Nmap_Bypass_IDS](https://github.com/al0ne/Nmap_Bypass_IDS)\n\n[入侵检测——masscan(扫描篇)](https://blog.csdn.net/weixin_44288604/article/details/115656891)"},{"title":"CentOS 基于 Docker 搭建 Typecho 博客系统","url":"/2021/07/14/deploy-typecho-blog/","content":"\n首先一般搭建动态博客都会有一个云服务器，国内的话供应商一般是阿里云或者腾讯云，我这里使用的是腾讯云，基本的操作逻辑大同小异。\n\n<!--more-->\n\n# 云服务器\n\n首先一般搭建动态博客都会有一个云服务器，国内的话供应商一般是阿里云或者腾讯云，我这里使用的是腾讯云，基本的操作逻辑大同小异。\n\n下面是我服务器的配置信息。\n\n![](https://img.seriouszyx.com/20210714235652.png#vwid=1646&vhei=876)\n\n# 安装 Docker\n\n## yum 换源\n\n首先将 yum 进行换源处理，以获得更快的下载速度。备份 `CentOS-Base.repo` 文件，以便更改配置文件出错恢复默认。\n\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n```\n\n之后下载新的 `CentOS-Base.repo` 到 `/etc/yum.repos.d` 。\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n```\n\n根据自己服务器的版本下载相应的配置文件，比如机器的操作系统是 CentOS7，就把下载链接最后的部分改为 `CentOS-7.repo` 。\n\n下载成功后运行 `yum makecache` 生成缓存即可，这样使用 yum 下载软件包时访问的就是阿里的镜像，速度会快很多。\n\n## 安装 Docker\n\n在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库，之后就可以从仓库安装和更新 Docker。\n\n先安装所需的软件包，`yum-utils` 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 `device-mapper-persistent-data` 和 `lvm2`。\n\n```bash\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n使用以下命令来设置稳定的仓库，国内的阿里源会加快下载速度。\n\n```bash\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n安装最新版本的 `Docker Engine-Community` 和 `containerd`。\n\n```bash\nyum install -y docker-ce docker-ce-cli containerd.io\n```\n\n安装后输入 `serivce docker status`  查看 Docker 运行状态，如下所示即正常运行。\n\n![](https://img.seriouszyx.com/20210714235730.png#vwid=1695&vhei=426)\n\n## Docker 换源\n\n修改镜像配置文件。\n\n```bash\nvim /etc/docker/daemon.json\n```\n\n添加国内源。\n\n```json\n{\n    \"registry-mirrors\": [\n       \"https://docker.mirrors.ustc.edu.cn\",\n       \"http://hub-mirror.c.163.com\",\n       \"https://registry.docker-cn.com\"\n    ]\n}\n```\n\n使用 `service docker restart` 命令重启 Docker 服务后生效。\n\n# 安装 Typecho 依赖环境\n\n所有容器依赖的一些数据都放在 `/data` 目录下，包括数据库、网站源码、Nginx 的 conf 等，目的是为了以后迁移方便，直接将 `/data` 拷贝到新服务器就可以。\n\n## 安装数据库 MySQL\n\n使用 Docker 安装 MySQL5.7，注意密码项的自定义修改。\n\n```bash\ndocker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --mount type=bind,source=/data/mysql,target=/var/lib/mysql --restart=always --name mysql5.7 mysql:5.7\n```\n\n`--mount` 命令也可以用 `-v /data/mysql:/var/lib/mysql` 代替，官方更推荐使用 `--mount`，详情请看[官网](https://docs.docker.com/storage/bind-mounts/)。\n\n对于 `docker run` 命令的部分参数说明：\n\n- -d 代表 daemon，即后台运行。\n- -p 是映射容器的3306端口到宿主机的3306端口，规则是：`-p IP:host_port:container_port` 。\n- -e 是设置 MySQL 的密码。\n- --mount 是让容器的`/var/lib/mysql` 映射到宿主机的 `/data/mysql` 目录中。\n- --restart=always 是为了在 Docker 重启时，容器能够自动启动。\n\n## 安装 Nginx\n\n```bash\ndocker run -p 80:80 -p 443:443 --mount type=bind,source=/data/nginx/conf.d,target=/etc/nginx/conf.d --mount type=bind,source=/data/solution,target=/data/solution --restart=always -d --name nginx nginx\n```\n\n- `--mount type=bind,source=/data/nginx/conf.d,target=/etc/nginx/conf.d` 是为了将 Nginx 的配置目录映射到宿主机的目录中，这样当 Nginx 容器被销毁时，依然能保留配置。\n- `/data/solution` 用于存放网站项目，也是为了数据与容器分离。\n- -d 这里同时映射了80和443端口。\n\n## 安装 PHP\n\n可以在 PHP 的[官方镜像源](https://hub.docker.com/_/php)找到最新版本的 PHP，在实际使用中，我们可能还需要装一些 PHP 的扩展，而官方源中支持已经帮我们安装了一些扩展的 PHP 镜像，如 `php:<version>-fpm`，其中的 `<version>` 指的是 PHP 版本，具体可以从官方镜像源找到。\n\n```bash\ndocker run --name php-fpm -p 9000:9000 --mount type=bind,source=/data/solution,target=/data/solution --restart=always -d php:7.4-fpm\n```\n\n这里也将网站根目录 `/data/solution` 映射到 PHP 容器中，为了 PHP 能正确读取 Nginx 中的 root 配置项。 \n\n由于 Typecho 需要用到 `pdo_mysql` 扩展，因此要在 `php-fpm` 上安装这个扩展。\n\n```bash\n# 进入到`php-fpm`容器内部\ndocker exec -it php-fpm bash\n# 安装扩展\ndocker-php-ext-install pdo_mysql\n# 查看是否已经成功安装\nphp -m\n# 退出容器\nexit\n```\n\n安装后重启 `php-fpm`，`pdo_mysql` 则安装成功。\n\n```bash\ndocker restart php-fpm\n```\n\n# 自定义 Bridge 网络\n\n执行命令看一下，现在机器上已经运行着 Nginx、PHP、MySQL 三个服务，现在需要让它们之间能够相互通信，这里使用自定义 Bridge 网络的方法。\n\n![](https://img.seriouszyx.com/20210714235804.png#vwid=1377&vhei=99)\n\n实际上启动容器时，Docker 会将容器绑定到默认的 Bridge 网络中，使用 `docker network inspect bridge` 命令打印此时默认的网络：\n\n```json\n[\n    {\n        \"Name\": \"typecho\",\n        \"Id\": \"d9d06a7e7410e75183eb09019bb895a12a01d2f7405f80e09d40811c578ff396\",\n        \"Created\": \"2021-06-11T13:10:53.453912588+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"2d4b9daf908252e40b8cca8e772e9dece8c1c36a467f2846fc0786d4964817cd\": {\n                \"Name\": \"mysql5.7\",\n                \"EndpointID\": \"8afe4a42884234acda9c8b996faed20d98015e6c919455edaf0d24f63bc22764\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"8cd032a4eeff30e7a54d81b6f92449160b243c793ba9d1a239cb4587896f2721\": {\n                \"Name\": \"php-fpm\",\n                \"EndpointID\": \"211aa7e5ab248aee84cc7875b76842037e1c597eb3f5b546b3705ac971c52c0a\",\n                \"MacAddress\": \"02:42:ac:12:00:04\",\n                \"IPv4Address\": \"172.18.0.4/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"ff4b411e355f1000552b892601164499a0c077fdd4a8eb22bb8c5e92f0757d83\": {\n                \"Name\": \"nginx\",\n                \"EndpointID\": \"e10b908ac0e0f6bd872a0b23d7ff30f58845700b7fe48568325d73ad38ba1747\",\n                \"MacAddress\": \"02:42:ac:12:00:03\",\n                \"IPv4Address\": \"172.18.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n\n可以看到 MySQL、php-fpm、Nginx 在默认 Bridge 中的 IP 分别是 `172.18.0.2`、`172.18.0.4`、`172.18.0.3`，  可以通过容器在宿主机中的 IP 来访问对应的服务，比如 php-fpm 想要访问 MySQL，可以在 php-fpm 容器中通过 `172.18.0.2:3306` 来访问。\n\n这种方式只能使用 IP 来访问对应的容器的服务，而 IP 可能会变化的，因此是不推荐使用在生产环境的。而用户自定义的 Bridge 网络，不仅支持 IP 访问，还支持直接使用容器名称访问。\n\n创建一个自定义 Bridge 网络，假设名称是 `typecho`。\n\n```bash\ndocker network create typecho\n```\n\n通过 `docker network connect ${网络名} ${容器名}` 来将容器绑定到 `typecho` 网络上。\n\n```bash\ndocker network connect typecho mysql5.7\ndocker network connect typecho php-fpm\ndocker network connect typecho nginx\n```\n\n现在三个容器已经绑定到自定义的 Bridge 网络上了。例如，在 Nginx 容器中，就可以直接通过 `php-fpm` 的名字来调用 PHP 的服务了。\n\n# 安装 Typecho\n\n进入 MySQL 容器创建数据库 `typecho` 。\n\n```bash\ndocker exec -it mysql5.7 bash\nmysql -uroot -p \n输入密码\ncreate database typecho;\n```\n\n进入 Typecho 官方[下载页面](https://typecho.org/download)，发现分为`稳定版`和`开发版`两种，按照一般的软件安装思路，当然是选择稳定版，但是 Typecho 的稳定版在2017年后就没有更新了，会遇到许多问题，比如我之前的安装中就遇到了[此类错误](https://github.com/typecho/typecho/issues/683) ，随后切换至开发版后问题解决。\n\n复制开发版的下载链接，下载到服务器的 `/data` 目录下并解压到 `/solution` 目录下。\n\n```bash\nwget https://nightly.link/typecho/typecho/workflows/Typecho-dev-Ci/master/typecho_build.zip \n\nunzip typecho_build.zip -d ./solution/typecho\n```\n\n然后配置 Nginx 使得网站可以正常访问。注意其中 Nginx 要访问 php-fpm，在配置文件中可通过名字访问其 Docker 容器。\n\n```bash\nserver {\n\tlisten 80;\n\tserver_name localhost;\n\troot   /data/solution/typecho;   # 这里是网站的存放路径\n  index  index.php;\n\n\t# 下面直接照写\n\tlocation / {\n    \ttry_files $uri $uri/ /index.php$is_args$args;\n\t}\n\t\n\tlocation ~ \\.php$ {\n        include fastcgi.conf;\n        include fastcgi_params;\n        fastcgi_pass php-fpm:9000;\n    }\n\t\n}\n```\n\n配置成功后重启 Nginx 容器，访问服务器的 IP 地址，开始配置 Typecho 博客系统。\n\n![](https://img.seriouszyx.com/20210714235847.png#vwid=1920&vhei=946)\n\n数据库适配器选择安装好的 `pdo-mysql` ，因为已经配置了自定义 Bridge 网络，数据库地址填入容器名即可访问数据库。\n\n![](https://img.seriouszyx.com/20210714235921.png#vwid=1920&vhei=2145)\n\n完成配置信息后会显示如下界面，需要复制文本框中的内容，然后创建 `config.inc.php` 文件粘贴进去。\n\n```bash\nvim /data/solution/typecho/config.inc.php\n```\n\n![](https://img.seriouszyx.com/20210714235946.png#vwid=1920&vhei=781)\n\n最终会显示安装成功页面，并可以查看默认的用户名和密码。\n\n![](https://img.seriouszyx.com/20210715000019.png#vwid=1920&vhei=944)\n\n下面两个链接分别是博客页面和后台控制面板。\n\n![](https://img.seriouszyx.com/20210715000053.png#vwid=1920&vhei=1015)\n\n![](https://img.seriouszyx.com/20210715000124.png#vwid=1920&vhei=950)\n\nTypecho 博客系统至此安装完成。\n\n---\n\n1. [Centos8使用docker迁移typecho博客](https://segmentfault.com/a/1190000021390958)\n2. [将CentOS的yum源更换为国内镜像源](https://blog.csdn.net/wudinaniya/article/details/105758739)\n3. [CentOS Docker 安装](https://www.runoob.com/docker/centos-docker-install.html)\n4. [Typecho 环境配置和博客搭建](https://wiki.dongxing.xin/pages/b1c12d/#php-%E5%AE%89%E8%A3%85)"},{"title":"到底什么才是区块链","url":"/2021/06/01/what-is-blockchain/","content":"\n区块链现在是紧跟着人工智能、大数据的新名词，提起区块链，大多数人首先想到的是炒币，充斥着虚假、浮躁，再加上前几年国家对这种现象的抵制，让很多人对区块链技术望而却步。\n\n\n\n殊不知，比特币只是区块链技术的一个分支，而区块链本身，凝聚了许许多多计算机科学家的智慧，发展突飞猛进，正在脱离实验室，走进人们的生活，未来可期。从 Facebook 的 [libra](https://libra.org/) 到最近[中国的重视态度](https://www.infoq.cn/article/zglACBgaSGXKFHV85F3G)，像 AI 一样，区块链将是未来几年甚至几十年围绕着人们的新技术。\n\n\n回过头来看，2008 年末“中本聪”提出区块链概念到目前为止不过十多年，现在开始了解区块链，你我都称得上是这项技术的先驱者。\n\n\n不过，目前国内介绍区块链的内容还是显得浮躁，鲜有真正踏踏实实介绍其内部技术细节的文章。下面是一篇我翻译的区块链的介绍文章，由 [Mohit Mamoria](https://mohitmamoria.medium.com/) 所作，在 [Medium](https://medium.com/hackernoon/wtf-is-the-blockchain-1da89ba19348) 上收到了广泛好评。文章比较长，图片很多，但值得耐心读完。无论你对区块链的认知如何，下面的有些内容一定会让你感到吃惊。\n\n<!--more-->\n\n---\n\n除非你是个鸵鸟，总是喜欢把脑袋埋进沙子里，否则你一定曾经听说过比特币和区块链这两个名词。毕竟，它们都是当今炙手可热的话题，即使是从未开采过加密货币或是从未了解过加密货币工作原理的人，也都在讨论它。跟很多人一样，我身边谈论它的非专业朋友甚至多于专业朋友。\n\n当这种情况发生，就到了写点东西的时候了，我希望用简单的文字为所有普通的互联网用户指明方向，以免大家在迷雾中没头脑地摸索。\n\n## 区块链：为什么我们需要这么复杂的东西？\n\n> “对于每个复杂的问题，都有一个清晰、简单而错误的答案” — H. L. Mencken\n\n与互联网上其他的文章不同的是，我们首先不是要定义区块链，而是要理解它所解决的问题。\n\n想象这样一个情景，你叫 Dude，你最好的朋友 Joe 在国外旅行，在他假期的第五天，他打电话给你说：“哥们，能不能借我点钱，我钱都花光了。”\n\n你回复他：“我马上就给你转。”\n\n![](/assets/posts/what-is-blockchain/1.png)\n\n然后你给银行经理打电话，让他从你的的账户上转1000美元到 Joe 的账户上。\n\n你的银行经理收到消息后打开登记簿，检查你的账户余额，看看你有没有足够的钱转账。在确认了你有足够的金额后，他在登记簿上做了如下操作：\n\n![](/assets/posts/what-is-blockchain/2.png)\n\n你打电话给 Joe，说钱已经汇过去了，下次他去银行就可以把你刚转给他的钱取出来了。\n\n![](/assets/posts/what-is-blockchain/3.png)\n\n刚刚发生了什么？你和 Joe 都相信银行来管理你们的资产。钱并没有真正的转移，只是在登记簿上做了一些记录。更准确的讲，你和 Joe 都不能直接控制登记簿上的记录。\n\n这就是当前系统存在的问题。\n\n**为了建立彼此之间的信任，我们必须依赖于第三方。**\n\n多少年来，我们一直以来这些中间人达到相互信任，可能你会问，依赖他们有什么问题吗？\n\n问题就是他们在数量上是单一的，如果一个人/一个组织有意或无意地走向腐败，那么社会就会混乱。\n\n- 如果记录交易的登记簿火灾中被烧毁了怎么办？\n- 如果你的银行经理将1000美元误写成了1500美元怎么办？\n- 如果他故意这么做怎么办？\n\n**多年来，我们总是在一棵树上吊死。**\n\n是否有这样一个系统，让我们不需要银行就可以转账？\n\n为了回答这个问题，我们需要进一步细化，问自己一个更好的问题（毕竟更好的问题才能得到更好的答案）。\n\n思考一下，转账这个动作意味着什么?只是在登记簿上记录一下，下面才是更好的问题——\n\n**有没有一种方式来维持我们之间的记录，而不是其他人替我们维持？**\n\n这是一个值得讨论的问题，不过我想你已经猜到了，**区块链**就是这个问题的答案。\n\n这是一种不需要依靠他人，仅凭我们自己来保持记录的方法。\n\n你应该没有走神吧？很好，因为现在，当这几个问题在你的脑海中开始浮现时，我们将正式介绍这个分布式记录簿是怎样工作的。\n\n## 告诉我，区块链是如何运作的？\n\n这种方法的前提条件是有足够多不希望依赖于第三方的人，只有这样，这些人才能自己维持记录。\n\n> 为了防止比特币流行起来，购买一些比特币或许是有意义的，如果有足够的人这样想，那么这将成为一个自我实现的语言。—中本聪（Satoshi Nakamoto），2009年\n\n多少个人才足够呢？至少三个，在我们的例子中，假设十个人想要放弃银行或其他第三方。经过大家的同意后，他们会一直保持彼此账户的详细信息，而无需知道别人的身份。\n\n![](/assets/posts/what-is-blockchain/4.png)\n\n1.一个空文件夹\n\n每个人都有一个空的文件夹，随着大家的前进，每个人的文件夹中都会添加新的记录页，这些记录页的集合就是记录交易的记录簿。\n\n2.什么时候发生交易？\n\n接下来，这个网络中的每个人手机都拿着一张纸额一支笔，每个人都准备记录系统中发生的任何交易。\n\n假设2号想要给9号转10美元。\n\n为了达成交易，2号要向大家喊：“我想给9号转10美元，所以，你们每个人都在自己的记录页上记下这笔交易。”\n\n![](/assets/posts/what-is-blockchain/5.png)\n\n每个人都会检查2号是否有10美元转给9号，如果有的话，他们每个人都会在自己的记录页上写下这笔交易。\n\n![](/assets/posts/what-is-blockchain/6.png)\n\n然后这笔交易就被视作完成了。\n\n3.交易不断发生\n\n随着时间的推移，系统中的每个人都有交易的需求。每当他们想交易时，都会向所有人公布，别人听完公布并检查后，都会将交易写在自己的记录页上。\n\n这个流程会一直进行下去，知道每个人都用光了当前的记录页。假设一个记录页可以记录十笔交易，当第十笔交易完成后，就证明每个人都用光了当前的记录页。\n\n![](/assets/posts/what-is-blockchain/7.png)\n\n现在是时候将记录页放到文件夹中，再取出一个新的记录页，重复上述的流程。\n\n4.收回记录页\n\n在我们将记录页放回文件夹之前，需要使用一个唯一的密钥来密封它，而且这个密钥要经过系统中每个人的同意。通过密封，我们将确保，无论今天、明天、甚至是一年后，一旦它的副本放在每个人自己的文件夹中，就没有人可以再对它进行任何更改。一旦进入文件夹，它就将永远在文件夹中密封。而且，如果每个人都信任印章，那么每个人都信任记录页的内容，**记录页的密封**也正是这个方法的关键之处。\n\n> 这在现实中称作“挖矿”，不过简单起见，我们仍然称它为“密封”。\n\n先前，第三方/中间人为我们提供信任，我们相信他们在记录簿上记录的内容不会改变。而在我们的这种分布式系统中，密封的手段为我们提供信任。\n\n## 很有趣！那么我们如何密封记录页呢？\n\n通常，在学习如何密封之前，我们将对密封的工作原理有一个大致的了解。作为前提，你需要知道这几个名词。\n\n### 魔法机器\n\n想象一个被厚重墙壁包裹的机器，如果你从左边输入一个装有东西的盒子，它会从右边吐出一个装有其他东西的盒子。\n\n> 事实上，这台机器叫“哈希函数”，不过我不太想技术化，现在，他就是台神奇的机器。\n\n![](/assets/posts/what-is-blockchain/8.png)\n\n假设，你从左边输入4，它可能从右边返回这些单词：dcbea。\n\n它是如何把数字4转换成这个单词的呢？没有人知道。而且，这是一个不可逆的过程。有了 dcbea 这个词，却不可能知道机器的左边被输入了什么。但每次你把数字4输入机器时，它总会吐出相同的单词 dcbea。\n\n![](/assets/posts/what-is-blockchain/9.png)\n\n让我们再尝试输入一个不同的数字，比如说 26。\n\n![](/assets/posts/what-is-blockchain/10.png)\n\n这次我们得到了 94c8e。很有趣不是吗！原来单词也可以包含数字。\n\n好，接下来请你思考这样一个问题：\n\n**你能告诉我我应该从机器的左边输入什么，才能从右边得到一个以三个0开头的单词吗？例如，000ab 或 00098 或 000fa 或其他单词。**\n\n![](/assets/posts/what-is-blockchain/11.png)\n\n好好想一会这个问题。\n\n之前说过，这台机器的一个性质就是无法从右边的输出结果推测出左边的输入内容，那么怎么才能回答我提出的问题呢？\n\n我能想到一个方法，为什么不一个一个尝试世界上所有的数呢，直到得到一个以三个0开头的单词？\n\n![](/assets/posts/what-is-blockchain/12.png)\n\n乐观地看，经过几千次尝试后，我们才会得到一个所需的输出。\n\n![](/assets/posts/what-is-blockchain/13.png)\n\n可见，根据输出来计算输入是一件很困难很困难的事情。但与此同时，要验证输入是否产生一个所需的输出总是非常容易的。记住，输入相同的数组机器总产生同样的单词。\n\n如果我给你一个数，比如说 72533，然后问你：“把这个数从左边放入机器中，是否能得到一个以三个0开头的单词？”\n\n那么你需要做的，就仅仅是把这个数字扔进机器中，然后观察右边产生的单词，你看，就是它。\n\n这种机器最重要的一个性质就是——“已知一个输出，很难计算出它的输入是什么，不过已知一个输入和一个输出，却很容易验证它们是否匹配。”\n\n在文章的剩余部分，一定要记住魔法机器（或者叫哈希函数）的这一特性：\n\n**已知一个输出，很难计算出它的输入是什么，不过已知一个输入和一个输出，却很容易验证它们是否匹配。**\n\n### 如何使用这些机器来密封记录页？\n\n我们将使用这种魔法机器来为记录页产生印章。同样，举个例子来说明。\n\n假设给你两个盒子，其中一个盒子中的数字是 20893，那么请问你能不能找出一个数字，使它加上20893并放入机器后产生一个以三个0开头的单词？\n\n![](/assets/posts/what-is-blockchain/14.png)\n\n这和之前的情况类似，我们已经知道答案了，计算这样一个数字的一个唯一的方法就是枚举世界上的每个数字。\n\n经过了几千次尝试后，我们或许能偶然发现一个数字，比如说21191，加上20893（21191 + 20893 = 42084）后放入机器中，可以得到一个满足需求的单词。\n\n![](/assets/posts/what-is-blockchain/15.png)\n\n在这种情况下，21191这个数字就是20893的印章。假设有一个记录页上写着20893，那么要密封该页（即任何人都不能更改该页的内容），我们就会在该页贴上21191的标签，封口号（即21191）一贴在记录页上，就表明该记录页已经被密封了。\n\n![](/assets/posts/what-is-blockchain/16.png)\n\n> 封口号被称为“工作证明（Proof Of Work）”，表明这个编号是经过努力的计算得来的，不过为了说明，我们更乐意叫它封口号。\n\n这样，想要验证一个记录页是否被篡改就很简单了，只需将记录页的内容加上封口号，再输入到魔法机器中，观察产生的结果是否以三个0开头。如果出现的单词不符合我们的要求，那就证明该页被更改了，没有任何用处。\n\n我们将使用类似的密封机制来密封所有记录页，并排列好它们放入各自的文件夹中。\n\n### 最后，密封我们的记录页\n\n为了密封包含系统中交易的记录页，我们需要计算出一个数字，这个数字添加到交易列表并输入到机器中，得到一个以三个0开头的单词。\n\n![](/assets/posts/what-is-blockchain/17.png)\n\n> “以三个0为开头的单词”只是一个例子，它说明了哈希函数的工作原理，实际情况比这复杂得多。\n\n花费时间和电力计算出的这个数字，就被用来作为记录页的封口号。如果有人试图篡改该页的内容，其他人可以使用封口号来验证它的完整性。\n\n现在，我们已经知道了如何封页。那么转回我们在记录页上完成第十笔交易的时间，我们已经用光了空间不能再增加新的交易了。\n\n当每个人都用完了记录页的空间时，他们就会沉迷于计算记录页的封口号，以便将它们放入文件夹中。系统中的每个人都会计算，第一个计算出封口号的人会向其他人宣布这个数字。\n\n![](/assets/posts/what-is-blockchain/18.png)\n\n一听到密封号，每个人都会立刻验证它是否产生了所需的输出。如果通过了验证，那么每个人都将使用这个数字来密封他们的记录页，并放入文件夹中。\n\n但是，对于某个人（比如7号）来说，公布的密封号不能产生所需的输出结果，该怎么办？这种情况并不罕见，可能有以下几个原因：\n\n- 他可能听错了系统中的某个交易\n- 他可能写错了系统中的某个交易\n- 在记录某些交易时，他可能试图伪造以使自己或系统中的其他人受益\n\n不管原因是什么，7号只剩下一个选择，那就是放弃他的记录页，从其他人哪里拷贝一份，然后放进他的文件夹中。如果他表示反对，那么他就无法继续进行交易，而且被禁止成为系统的一部分。\n\n**多数人通过的密封号就是真实的密封号。**\n\n可能你会问，既然知道了别人计算出密封号后会向他们公布，那为什么他们自己还要花费资源计算呢？为什么不闲坐着静静等待公布呢？\n\n这是一个很好的问题，恰恰指明了区块链的激励来源，第一个计算出密封号的人会因为他的努力（即消耗的 CPU 功率和电力）而获得免费的金钱。\n\n试想一下，如果5号计算出一个记录页的封口号，他就会得到免费的金钱，比如说1美元。这些钱是凭空冒出来的，换句话说，5号的账户余额会增加1美元，而其他人的余额不会减少。\n\n比特币就是这样诞生的，它是区块链上进行交易的第一种货币。为了回报对封口号努力的计算，人们被授予比特币。\n\n当足够数量的人获得比特币时，它们的价值就会增加，促使其他人也想获得比特币。\n\n**奖励让系统中的每个人都保持工作。**\n\n一旦每个人都将记录页放入文件夹中，他们就会拿出一个新的记录页，并永远重复这个流程。\n\n> 将一个记录页想象成一个交易区块，将一个文件夹想象成一个记录页（区块）的链表，这样，就演变成了区块链。\n\n至此，你已经掌握了区块链的工作原理。\n\n---\n\n还有一个小问题没有告诉你。\n\n假设文件夹中已经有了五个密封好的记录页，如何有人想篡改第二页的一笔交易呢？为修改后的记录页生成一个新的密封号就可以了吗？\n\n为了防止有人返回修改记录页和密封号，需要在计算密封号的过程中稍微变化一下。\n\n### 保护密封号的修改\n\n还记得刚才讲过的两个盒子吗？一个盒子中包含数字20893，另一个盒子中的数字需要你计算。在现实中，要计算一个区块的密封号，不是两个盒子，而是两个填充好的，一个需要计算的。\n\n当这三个盒子的内容加和并输入机器时，从右边出来的答案必须满足要求的条件。\n\n我们已经知道，一个盒子包含交易列表，一个盒子包含封口号，第三个盒子有些不同，它包含了前一页魔法机器的输出结果。\n\n![](/assets/posts/what-is-blockchain/19.png)\n\n通过这个简单的小技巧，我们确保了每个记录页都依赖于上一个记录页。因此，如果某个人必须修改历史的记录页，那么他还需要修改之后的所有记录页的内容和封封口号，以保持链表的一致。\n\n如果我们一开始想象的十个人中的一个试图欺骗篡改区块链的内容，他就部分不调整几个记录页，并为这些记录页计算出新的封口号。我们知道计算封口号是一个很困难的过程，因此系统中的一个不诚实的人无法打败其他九个诚实的人。\n\n还有可能发生这种情况，一个不诚实的人作弊，他会创建一个新的链表。不过这个新的链表永远无法赶上诚实的链表，因为一个人的努力和速度无法打败其他九个人的累计之和。因此，**系统中最长的链表是最诚实的链表。**\n\n![](/assets/posts/what-is-blockchain/20.png)\n\n当我告诉你一个不诚实的人无法打败九个诚实的人时，你是不是有新的疑问呢？\n\n### 不是一个，如果六个人都变得不诚实呢？\n\n在这种情况下，协议将彻底失败，这被称为“51%攻击”。如果系统中的大多数个体u决定变得不诚实并欺骗系统中的其他部分时，协议就毫无价值了。\n\n这也是个区块链可能崩溃的唯一脆弱原因，要知道，这几乎是不可能发生的，但我们都必须知道系统的弱点，它是建立在大多数人始终诚实的基础上的。\n\n朋友们，这就是关于区块链的所有内容了。如果你发现有人被这项技术甩在身后，那么就把这篇文章分享给他，让他将链接添加至书签。","tags":["区块链"]},{"title":"最新超详细 VMware 的下载与安装","url":"/2021/05/30/vmware-download-and-install/","content":"\n我的 CSDN 站点上破 50w 浏览量的 [VMware 安装教程](https://blog.csdn.net/qq_40950957/article/details/80467513)，由于 CSDN 文章中发现写有激活码审核不通过，所以将其放于本独立博客站点。\n\n<!--more-->\n\n## VMware 下载\n\n进入官网的 [VMware Workstation Pro 页面](https://www.vmware.com/cn/products/workstation-pro.html)，浏览功能特性、应用场景、系统要求等。下滑页面点击 `试用 Workstation 16 Pro` 下方的下载链接，跳转至[下载页面](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html)。\n\n![](/assets/posts/vmware-download-and-install/1.png)\n\n在下载页面中下滑，根据操作系统选择合适的产品，在这里以 Windows10 系统为例，选择  `Workstation 16 Pro for Windows`，开始下载安装文件。\n\n![](/assets/posts/vmware-download-and-install/2.png)\n\n## VMware 安装\n\n打开下载好的 `.exe` 文件， 即可开始安装。\n\n![](/assets/posts/vmware-download-and-install/3.png)\n\n安装位置默认在 C 盘下，在这里我选择安装在 D 盘，安装路径尽量不要有中文。可勾选 `增强型键盘驱动程序` ，此功能可更好地处理国际键盘和带有额外按键的键盘。\n\n![](/assets/posts/vmware-download-and-install/4.png)\n\n一直点击 `下一步` 等待软件安装完成。 \n\n![](/assets/posts/vmware-download-and-install/5.png)\n\n安装成功后点击 `许可证` 输入密钥激活软件。\n\n![](/assets/posts/vmware-download-and-install/6.png)\n\n下面是一些网上搜集的可用密钥，复制到文本框中点击 `输入`。\n\n- VMware Workstation Pro 16\n    - ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n- VMware Workstation Pro 15\n    - FG78K-0UZ15-085TQ-TZQXV-XV0CD\n    - ZA11U-DVY97-M81LP-4MNEZ-X3AW0\n    - YU102-44D86-48D2Z-Z4Q5C-MFAWD\n\n![](/assets/posts/vmware-download-and-install/7.png)\n\n安装后可能要求重启系统，重启后进入软件。依次点击导航栏中的 `帮助 -> 关于 VMware Workstation` ，查看许可证信息的状态，如下图所示即为激活成功。\n\n![](/assets/posts/vmware-download-and-install/8.png)","tags":["软件安装"]},{"title":"服务器内网穿透","url":"/2021/02/14/expose-local-server/","content":"\n本科 AI 实验室的服务器在内网部署，疫情期间大家都没办法在学校，又需要使用 GPU 完成一些工作。正好老板又添置了一台服务器，派我做一下内网穿透，方便远程使用。\n\n<!--more-->\n\n# 服务器配置\n\n\n主要想记录一下软件方面的配置，所以怎么安装滑轨、怎么接线这类问题就不赘述了，下面的表格中记录了两台服务器的软硬件配置。\n\n\n\n|  | server1 | server2 |\n| --- | --- | --- |\n| GPU | Tesla V100 16G×2 | Quadro RTX 6000 24G×2 |\n| CPU | Intel Xeon Gold 5117 @ 2.00GHz | Intel Xeon Gold 6240R @ 2.40GHz |\n| 内存 | 128G | 128G |\n| 硬盘 | 20TB | 24TB |\n| 操作系统 | Ubuntu 18.04 LTS | Ubuntu 18.04 LTS |\n\n\n\n# 内网穿透\n\n\n上述两台服务器都在学院机房里，此局域网的限制很大，甚至学校提供的 VPN 都无法访问，必须要在学院内部的网络才能访问。当用户在宿舍或者校外，是没有官方提供的代理工具来连接服务器的，所以就需要一台公网服务器做转发，用户通过公网 ip 来访问内网的服务器，这就需要内网穿透技术。\n\n\n市面上有一些成熟的内网穿透软件，如花生壳、蒲公英等，但免费版本大多有带宽限制，且速度极慢，无法正常使用。然而这些软件底层或多或少都依赖 [frp](https://github.com/fatedier/frp)，一款专注于内网穿透的高性能反向代理应用，支持多种协议，可以安全的将内网服务通过公网 ip 节点的中转暴露到公网。\n\n\n经调研后发现，frp 原生支持端口复用，也就是多个服务通过同一个服务端端口暴露。这样可以使用一台公网服务器同时代理两台内网服务，通过不同外网端口访问不同的内网服务。\n\n\nfrp 的安装包在 [GitHub ](https://github.com/fatedier/frp/releases)上，值得注意的是，要想使 frp 正常工作，必须在不同服务器上下载相同版本的 frp 包。\n\n\n## 服务端设置\n\n\n> frp 的服务端是进行中转的公网服务器，具有独立的公网 ip。\n\n\n\n下载解压 frp 包，我一般放置在 `/usr/local/frp/` 目录下，编辑服务端配置文件 `frps.ini` 。\n\n\n```bash\n[common]\nbind_port = 7000\nvhost_http_port = 8899\n```\n\n\n其中：\n\n\n- “bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。\n- “vhost_http_port”和“vhost_https_port”用于反向代理 HTTP 主机时使用，本文不涉及 HTTP 协议，因而照抄或者删除这条均可。\n\n\n\n编辑完成后即可保存，运行服务端应用。\n\n\n```bash\n./frps -c frps.ini\n```\n\n\n此时的服务端仅运行在前台，如果 `Ctrl+C` 停止或者关闭 SSH 窗口后，frps 均会停止运行，因而我们使用 [nohup 命令](https://www.runoob.com/linux/linux-comm-nohup.html)将其运行在后台。\n\n```bash\nnohup ./frps -c frps.ini &\n```\n\n\n至此，服务端即设置完成，你可以关闭SSH窗口了。\n\n## 客户端配置\n\n\n> frp 的客户端是真正想要访问的内网服务器。\n\n\n\n同样下载解压好 frp 软件，注意版本的统一，编辑两台客户端配置文件 `frpc.ini`。\n\n\n```bash\n[common]\nserver_addr = 39.106.21.214\nserver_port = 7000\n \n[ssh]\ntype = tcp\nlocal_ip = 172.10.1.185\nlocal_port = 22\nremote_port = 6666\n```\n\n\n```bash\n[common]\nserver_addr = 39.106.21.214\nserver_port = 7000\n\n[ssh1]\ntype = tcp\nlocal_ip = 172.10.1.184\nlocal_port = 22\nremote_port = 6667\n```\n\n\n其中：\n\n\n- “server_addr”为服务端 ip 地址，填入即可。\n- “server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000。\n- “[xxx]”表示一个规则名称，自己定义，便于查询即可。\n- “type”表示转发的协议类型，有 TCP 和 UDP 等选项可以选择，如有需要请自行查询 frp 手册。\n- “local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。\n- “remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。\n\n\n\n配置好后可以使用同样的方法后台运行客户端程序。\n\n\n```bash\nnohup ./frpc -c frpc.ini &\n```\n\n\n# 服务链架构\n\n\n下面是整个 frp 服务链的架构（图中 ip 及端口号皆为模拟值）：\n\n\n![frp 架构](/assets/posts/expose-local-server/image.png)\n\n\n实线代表直接网络连接，虚线代表虚拟网络连接。在内网服务器（frpc）中配置的 `remote_port` 将在启动后向公网服务器（frps）发送（通过7000端口）注册信息，发送成功后，公网服务器开始监听6666和6667两个端口。\n\n\n在实际访问时，直接在 SSH 客户端输入公网服务器的 ip 地址，通过6666和6667两个端口号控制访问两台内网服务器，而其中的 `server_port` 、 `server_addr` 、 `local_ip` 和 `local_port` 等信息对用户透明，简单方便。\n\n\n> 参考：\n> - [使用frp进行内网穿透](https://sspai.com/post/52523)\n> - [frp issues 174](https://github.com/fatedier/frp/issues/174)\n\n\n\n\n"},{"title":"一个人的字幕组","url":"/2021/02/04/subtitle-group-for-one-person/","content":"\n\n# 也想成为字幕组\n\n\n我不是很懂当代流量的导向，人们到底乐意为怎样的内容驻足，是我很困惑的问题，就像我的 CSDN 最高互动量是一篇很简单的 VMware 安装教程，我的 GitHub 最高 star 数是只进行了几周的 CS61B 课程实验。它们算不上我心目中内容产出最高的两位，却被大众普遍接受，唯一的共同点可能是门槛较低、需求较广。然而，对于这些可能是互联网上占比最大的群体，现有的资源鱼龙混杂，多少内容靠着标题吸引流量，看完后才发现是贩卖焦虑、治标不治本。所以，我想为这种情况的改变做出点贡献。\n\n\n我搜索着 CS61B 的国内生态，这门完全公开、享誉世界的数据结构神课，虽在知乎、一亩三分地等处推荐强烈，但实际高质量完成的人数稀少。这要归因于语言和网络的阻碍，机翻字幕味同嚼蜡，YouTube 的访问也劝退了一大批初学者。于是我便有了方向，我决意用自己闲暇的时光，化身一个人的字幕组，翻译出这门课的所有视频资料，并搬运到 B 站。\n\n\n这两天，我调研了相关的工具，考虑了一些取舍，这期间实为不易，总结出一套满意的工作流，记录于此。\n# 工作流\n## 片源\n视频源在 Josh Hug 的[播放列表](https://www.youtube.com/channel/UC7FzTMO4rKvlqIyU5vwzFKQ/playlists)中，他把每周的视频整理成一个列表，下载最高画质我比较喜欢用 [y2mate](https://www.y2mate.com/)，甚至可以提取出音频文件。字幕提取 [downsub](https://downsub.com/) 挺不错的，直接下载 srt 格式，CS61B 2018 Spring 这个版本的视频有自带的 CC 字幕，但是时间轴还是有点奇怪，需要自己调整一下。如果有字幕文件格式转换的需求，我一般使用 [subtitle-converter](https://gotranscript.com/subtitle-converter)。\n## 打轴\n这一步就开始麻烦起来了，简单解释起来就是把每一句轴对准。此外还要考虑断句，要简单读一下每句的意思，以便后期翻译。最后，下载的英文字幕可能有出错的地方，发现也要纠正一下。\n\n\n具体的操作我参考的[【Aegisub教程】快速打轴法](https://www.bilibili.com/video/BV1ps411b7as)。将字幕和对应的视频文件导入 [Aegisub](https://github.com/Aegisub/Aegisub)，只显示音频和字幕。左手放置在 SDFG 四个键位上，控制每句话的播放、确认等操作，我还把时间轴合并设置了热键，因为原版断句很多太细碎了。右手操纵鼠标左右键，控制每段时间轴的开始和结束位置，特别注意 Josh Hug 经常有一些语气词，我一般不把它们包含在轴内。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/1.png)\n## 初翻\n我习惯用 [Tern](https://zh.tern.1c7.me/) 先初次翻译一下，导入单语字幕后会自动机翻并生成双语字幕。因为英文的时间轴已经调整过了，断句肯定要比原版更好，即便是机翻也不会像 YouTube CC 机翻那么生硬。在软件设置里修改一下输出格式，原文译文分成两行，原文全部在前，译文全部在后。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/2.png)\n\n\nsrt 是标准的外轨字幕，没有样式和动画，我倾向设置样式，加重中文的显示效果。Aegisub 有样式管理器，我的样式基于 Crash Course 字幕组的[公开样式](https://1c7.me/open-source-subtitle-file/)，他们组织的代表作是[计算机速成课](https://www.bilibili.com/video/av21376839/)，也超过了百万播放量。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/3.png)\n\n\n分别全选所有中英文字幕，设置中英文样式模板，再把字幕以开始时间排序。保存后字幕文件会自动转换为 ass 格式，之后打开会直接链接视频文件并加载字母样式。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/4.png)\n\n\n虽然这步的名字我起为“初翻”，但主要目的是生成中文时间轴，并调整样式，为下面的翻译做准备。事实上，简单的句子机翻表现得还不错，但几乎90%的句子都需要重新修改，所以在内容翻译上，这步只是一个辅助作用。\n## 翻译\n终于到了重头戏，这步难点不在工具的使用，而在于翻译。既要考虑遵于原意，又要让语言易懂，不那么生硬。特别是 Josh Hug 口语化严重，很多细节需要格外考量。另外断句也很繁琐，很多时候把一大段文字翻译完，发现会错意，又要重新逐句更改。\n还有一些细碎的注意事项，全部加起来让工作量成倍增加，也出乎了我的设想。同时背后的专业能力也要跟上，遇到不懂的地方还要去网上查询资料。但不管怎样，还是以质量为主。\n\n\n下面是翻译后的译文，可以将这几段轴与上一张图片机翻的作比较，哪一个过分生硬，哪一个一眼就能明白，显而易见。这还是开篇简单的几句话，涉及到专业的内容，机翻与手翻的差异会更加明显。\n![image.png](/assets/posts/subtitle-group-for-one-person/5.png)\n## 审片\n每一小集视频制作完成后，我都需要再整体带 ass 字幕看几遍视频，检查有没有字幕错误、不同步，时间轴是否有重合，错别字，翻译语句是否不通畅等等小问题。我其实不急于压制，也不急于发布，在制作完几个视频后，再回过头来审阅每个视频，保证错误率降到最低。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/6.png)\n\n\n## 压制\n压制即将原视频和制作好的字幕整合在一起，并设置码率等配置在保持一定清晰度的前提下大幅度压缩体积。小丸工具箱是很主流的选择，官网的网盘链接失效了，不过 B 站[创作中心](https://dl.hdslb.com/video-press/xiaowantoolsrev194.zip)有提供。\n\n\n为了保证视频的质量，x264和 CRF 等压缩选项都输出最高画质，之后便可以压缩成 MP4 格式，上传到 B 站。\n\n\n![image.png](/assets/posts/subtitle-group-for-one-person/7.png)\n# 关于课程\n大概是周一萌生了这个想法，周二周三调研相关工具后亲手制作了将近20分钟时长的视频，周四写下了这篇记录，所以还有很多不成熟的地方，我会随时修改。\n\n\n这件事情本源于我的心血来潮，真正去实践起来，花费的时间要比我预想的多得多。我还没有确定发布的进度，可能凑几周发布一次，也可能全制作好后一起发布，也可能永远搁置了。\n\n\n但值得庆幸的是，虽然包含很多重复的工作，我投入起来却干劲十足，甚至有点茶饭不思的激情。审片是整个流程中最开心的时刻，看着原版难以理解的视频，一步一步经过我手变得通俗易懂，我想这种成就感会推动我一直走下去，直至课程尽头。\n\n\n"}]